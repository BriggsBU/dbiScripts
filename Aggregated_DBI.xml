
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, June 30, 2007, 10:48  -->
<!-- MuClient version 4.13 -->

<!-- Plugin "Aggregated DBI Tool" generated by Plugin Wizard -->

<!--
Keeps track of a bunch of prompt/combat/meditate/focus/general info to give you redux statistics and reduced spam.
-->

<muclient>
<plugin
   name="Aggregated_DBI"
   author="Rhozo"   
   id="703dbfca1423310152c475a3"
   language="Lua"
   purpose="Scrapes output to give you statistics on all sorts of stuff."
   date_written="2015-10-10 03:50:00"
   requires="4.08"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Records to the various messages in the MUD Prompt/med/focus to report statistics for the user.
]]>
</description>

</plugin>

<!--  Triggers  -->

<triggers>
	<trigger
		enabled="y"
		match="^Welcome to the DragonBall Infinity.  A MUD based on the DragonBall,"
		omit_from_output="n"
		regexp="y"
		script="onConnect"
		sequence="100"
	>
	</trigger>
	
	<trigger
		enabled="y"
		match="^You begin to meditate..."
		omit_from_output="y"
		regexp="y"
		script="onStartMeditate"
		sequence="100"
	>
	</trigger>

	<trigger
		enabled="y"
		match="^You begin to focus your ki into your body..."
		omit_from_output="y"
		regexp="y"
		script="onStartFocus"
		sequence="100"
	>
	</trigger>
	
	<trigger
		enabled="y"
		match="^You meditate peacefully, collecting energy from the cosmos*"
		omit_from_output="y"
		regexp="y"
		script="onTickMeditate"
		sequence="100"
	>
	</trigger>

	<trigger
		enabled="y"
		match="^You focus your ki into your body, your cells absorbing the ambient energy."
		omit_from_output="y"
		regexp="y"
		script="onTickFocus"
		sequence="100"
	>
	</trigger>
		
	<trigger
		enabled="y"
		match="^You stop meditating..."
		omit_from_output="y"
		regexp="y"
		script="onStopMeditate"
		sequence="100"
	>
	</trigger>

	<trigger
		enabled="y"
		match="^You stop concentrating..."
		omit_from_output="y"
		regexp="y"
		script="onStopFocus"
		sequence="100"
	>
	</trigger>
	
	<trigger
		enabled="y"
		match="^.*Your (powerlevel|techlevel) increases by (.*) points."
		omit_from_output="y"
		regexp="y"
		script="onGainedPL"
		sequence="100"
	>
	</trigger>

	<trigger
		enabled="y"
		match="^.*You gain (.*) ki. Your max ki is now (.*)."
		omit_from_output="y"
		regexp="y"
		script="onGainedKi"
		sequence="100"
	>
	</trigger>
	
	<trigger	
		enabled="y"
		match=".* K:(.*) P:.*"
		omit_from_output="y"
		regexp="y"
		script="onPromptCheck"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^H\[.*\] K\[(.*)/(.*)\] F\[.*\]"
		omit_from_output="n"
		regexp="y"
		script="onPromptCheck"
		keep_evaluating="y"
		sequence="5"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^H\[(.*)\] K\[(.*)/(.*)\] F\[(.*)\]$"
		omit_from_output="y"
		regexp="y"
		script="onPromptScrape"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^H\[(.*)\] V\[(.*)\] K\[(.*)/(.*)\] F\[(.*)\]$"
		omit_from_output="y"
		regexp="y"
		script="onBattlePromptScrape"
		sequence="99"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^P\[(.*)\|(.*)\] \$\[\$(.*)\] A\[(.*)/(.*)\]$"
		omit_from_output="y"
		regexp="y"
		script="onPromptScrape2"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(.*) is DEAD!!$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onEndCombat"
		sequence="100"
	>	
	</trigger>
	
	<trigger
		enabled="y"
		match="^..Everything begins to fade to black.$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onEndCombat"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You get (.*) zeni from the corpse of (.*)$"
		omit_from_output="y"
		regexp="y"
		script="onGetZeni"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^Picard gives you nothing for your sacrifice.$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^I see nothing in the corpse.$"
		omit_from_output="y"
		regexp="y"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You must stand to do that!$"
		omit_from_output="y"
		regexp="y"
		script="printStand"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You need to focus more.$"
		omit_from_output="y"
		regexp="y"
		script="onNeedFocus"
		sequence="100"
	>	
	</trigger>

	<trigger	
		enabled="y"
		match="^(?P<foename>.*) hits you, but you soak the damage\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onSoak"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) hits you. You laugh at .* weak power\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onSoak"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*)'s hit is absorbed by the ki energy surrounding you\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onSoak"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You cross your arms and block (?P<foename>.*)'s hit\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onSoak"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) lands .* hit but you just grin at .*\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onSoak"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You block (?P<foename>.*)'s physical attack\.$"
		omit_from_output="y"
		regexp="y"
		script="onBlock"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You dodge (?P<foename>.*)'s hit with incredible speed\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) overextends .* and misses you\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) trips on something and misses you\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) aims too (low|high) and misses you\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>	
		
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) loses concentration for a moment and misses you\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You chuckle as (?P<foename>.*) goes off-balance by missing you\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You (duck under|jump over) (?P<foename>.*)'s attack\. \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) misses you\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemyMiss"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You dodge (?P<foename>.*)'s physical attack\.$"
		omit_from_output="y"
		regexp="y"
		script="onDodge"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You miss (?P<foename>.*)\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^You get laughed at by (?P<foename>.*) for your off-balance miss\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^You lose concentration for a moment and miss (?P<foename>.*)\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^You aim too (high|low) and miss (?P<foename>.*)\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) (jumps over|ducks under) your attack\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) dodges your hit with incredible speed\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^You trip on something and miss (?P<foename>.*)\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 	
	
	<trigger	
		enabled="y"
		match="^You overextend yourself and miss (?P<foename>.*)\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onMiss"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^(?P<foename>.*) crosses .* arms and blocks your hit\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemySoak"
		sequence="100"
	>	
	</trigger> 	

	<trigger	
		enabled="y"
		match="^You hit (?P<foename>.+?) but (he|she|it+?) seems to shrug off the damage\.  \[0\]$"
		omit_from_output="y"
		keep_evaluating="n"
		regexp="y"
		script="onEnemySoak"
		sequence="99"
	>	
	</trigger> 	

	<trigger	
		enabled="y"
		match="^You land your hit but (?P<foename>.*) just grins at you\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemySoak"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^You hit (?P<foename>.+?)\.\s(.+?)\sjust laughs at your weak power\. \[0\]$"
		omit_from_output="y"
		keep_evaluating="n"
		regexp="y"
		script="onEnemySoak"
		sequence="99"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^Your hit is absorbed by the ki energy surrounding (?P<foename>.*)\.  \[0\]$"
		omit_from_output="y"
		regexp="y"
		script="onEnemySoak"
		sequence="100"
	>	
	</trigger> 
	
	<trigger	
		enabled="y"
		match="^You (tickle|brush|scratch|tear|cut|graze|nick|jolt|wound|_traumatize_|injure|gash|lacerate|rip|_devastate_|_mangle_|_maim_|DISEMBOWEL|_cleave_|GUT|hack|decimate|thrash|maul|jar|hit|DESTROY|\*\*\*\* ATOMIZE \*\*\*\*|\*\*\* ANNIHILATE \*\*\*|\* VAPORIZE \*|\* LIQUIFY \*|\* OBLITERATE \*)\s+(?P<foename>.*)(\!|\.)\s+\[(?P<damage>.*)\]$"
		omit_from_output="y"
		regexp="y"
		script="onDealDamage"
		sequence="100"
	>	
	</trigger> 

	<trigger	
		enabled="y"
		match="^(?P<foename>.*) (tickles|brushes|scratches|tears|cuts|grazes|nicks|jolts|wounds|_traumatizes_|injures|decimates|gashes|lacerates|rips|_devastates_|_mangles_|_maims_|DISEMBOWELS|_cleaves_|GUTS|hacks|thrashes|mauls|jars|hits|DESTROYS|\*\*\*\* ATOMIZES \*\*\*\*|\*\*\* ANNIHILATES \*\*\*|\* VAPORIZES \*|\* LIQUIFIES \*|\* OBLITERATES \*) you(\!|\.)\s+\[(?P<damage>.*)\]$"
		omit_from_output="y"
		regexp="y"
		script="onTakeDamage"
		sequence="100"
	>	
	</trigger> 	
	
	<trigger	
		enabled="y"
		match="^Total (powerlevel|techlevel) gained this fight: (.*)$"
		omit_from_output="y"
		regexp="y"
		script="onGainCombatPL"
		sequence="100"
	>	
	</trigger> 	
	
	<trigger	
		enabled="y"
		match="^H\[(.*)\] V\[(.*)\] K\[(.*)/(.*)\] F\[(.*)\]$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onPromptShowRoundInfo"
		sequence="98"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You turn the dial to (?P<timesGravity>.*) times gravity and begin training your (?P<trainingStat>.*)\.$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onStartTraining"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You take a break and stop training your (?P<trainingStat>.*)\.$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onStopTraining"
		sequence="100"
	>	
	</trigger>
	
	<trigger	
		enabled="y"
		match="^You stop training your (?P<trainingStat>.*)\.$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onStopTraining"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You get (?P<itemName>.*) from the corpse of (?P<foeName>.*)$"
		omit_from_output="n"
		keep_evaluating="y"
		regexp="y"
		script="onLootDrop"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You gained 5 additional training points!$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onEarnedTrains"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You try to allow your mind to grasp the excess energies of the leylines flowing$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^Energy from the leylines pulses in your veins as you wave your$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^through you, but the mana current escapes your grasp...$"
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onThoughtcraftFail"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^hands and create a psychic crystal with the excess energy."
		omit_from_output="y"
		keep_evaluating="y"
		regexp="y"
		script="onThoughtcraftSucceed"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^and collect and merge with your own."
		omit_from_output="n"
		keep_evaluating="y"
		regexp="y"
		script="onThoughtcraftStart"
		sequence="100"
	>	
	</trigger>	
	
	<trigger	
		enabled="y"
		match="^You open your eyes and stop trying to create shards."
		omit_from_output="n"
		keep_evaluating="y"
		regexp="y"
		script="onThoughtcraftStop"
		sequence="100"
	>	
	</trigger>
</triggers>

<aliases>
<alias
match="^session$"
enabled="y"
expand_variables="y"
regexp="y"
keep_evaluating="y"
send_to="12"
script="onReportGains"
sequence="100"
>
</alias>
<alias
match="^clear$"
enabled="y"
expand_variables="y"
regexp="y"
keep_evaluating="y"
send_to="12"
script="onConnect"
sequence="100"
>
<send>
Note("Cleared local variables.")
</send>
</alias>
<alias
match="^setBattlePrompt$"
enabled="y"
expand_variables="y"
regexp="y"
keep_evaluating="n"
send_to="12"
sequence="100"
script="setBattlePrompt"
>
</alias>

<alias
match="^setPrompt$"
enabled="y"
expand_variables="y"
regexp="y"
keep_evaluating="n"
send_to="12"
sequence="100"
script="setPrompt"
>
</alias>

</aliases>

<!--  Script  -->

<script>
<![CDATA[

local original_max_ki = 0.0
local current_ki = 0.0
local max_ki = 0.0
local current_gained_pl = 0.0
local total_gained_pl = 0.0
local current_gained_ki = 0.0
local total_gained_ki = 0.0
local current_meditate_ticks = 0.0
local current_focus_ticks = 0.0
local total_meditate_ticks = 0.0
local total_focus_ticks = 0.0
local last_meditate_tick = GetInfo(232)
local last_focus_tick = GetInfo(232)
local current_elapsed_meditate_time = 0.0
local current_elapsed_focus_time = 0.0
local total_elapsed_meditate_time = 0.0
local total_elapsed_focus_time = 0.0
local in_focus = false
local in_meditate = false
local ki_gain_string1 = ""
local ki_gain_string2 = ""
local ki_gain_string3 = ""
local ki_gain_string4 = ""
local ki_gain_string5 = ""
local pl_gain_string1 = ""
local pl_gain_string2 = ""
local pl_gain_string3 = ""
local pl_gain_string4 = ""
local is_low_on_focus = false

--tells the script you've already gotten the meditate message from promptCheck, prevents it from firing more than once in a round
local already_received_meditate_message = false

local is_out_of_ki = false
local is_at_max_ki = false

local absolute_start_time = GetInfo(232)

local health = 0
local foe_health = 0
local current_focus = 0
local max_focus = 0
--PL here is a string, it's cool.
local base_pl = ""
local max_pl = ""
local zeni = 0
local current_armor = 0
local max_armor = 0

local combat_round_pl_gained = 0
local training_pl_gained = 0
local total_training_pl_gained = 0

local combat_pl = 0
local attacks = 0
local defends = 0
local blocks = 0
local dodges = 0
local misses = 0
local enemy_misses = 0
local soaks = 0
local enemy_soaks = 0
local hits = 0
local enemy_hits = 0
local combats = 0

local damage_dealt = 0
local damage_received = 0
	
local total_damage_dealt = 0
local total_damage_received = 0

local total_attacks = 0
local total_defends = 0
local total_blocks = 0
local total_dodges = 0
local total_misses = 0
local total_enemy_misses = 0
local total_soaks = 0
local total_enemy_soaks = 0
local total_hits = 0
local total_enemy_hits = 0

local overkill_counter = 0

local damage_dealt_since_last_round = 0
local hits_since_last_round = 0
local damage_received_since_last_round = 0
local hits_received_since_last_round = 0

local foe_name = ""

local times_gravity = 0
local training_stat = ""

local thoughtcraft_attempts = 0
local thoughtcraft_successes = 0

function resetMedFocValues()
	original_max_ki = 0.0
	current_ki = 0.0
	max_ki = 0.0
	current_gained_pl = 0.0
	total_gained_pl = 0.0
	current_gained_ki = 0.0
	total_gained_ki = 0.0
	current_meditate_ticks = 0.0
	current_focus_ticks = 0.0
	total_meditate_ticks = 0.0
	total_focus_ticks = 0.0
	last_meditate_tick = GetInfo(232)
	last_focus_tick = GetInfo(232)
	current_elapsed_meditate_time = 0.0
	current_elapsed_focus_time = 0.0
	total_elapsed_meditate_time = 0.0
	total_elapsed_focus_time = 0.0
	in_focus = false
	in_meditate = false
	combat_round_pl_gained = 0
	training_pl_gained = 0
	is_low_on_focus = false
	ki_gain_string1 = ""
	ki_gain_string2 = ""
	ki_gain_string3 = ""
	ki_gain_string4 = ""
	ki_gain_string5 = ""
	pl_gain_string1 = ""
	pl_gain_string2 = ""
	pl_gain_string3 = ""
	pl_gain_string4 = ""
end

function resetPromptValues()
	health = 0
	foe_health = 0
	current_focus = 0
	max_focus = 0
	
	base_pl = ""
	max_pl = ""
	zeni = 0
	current_armor = 0
	max_armor = 0
	
	times_gravity = 0
	training_stat = ""
	total_training_pl_gained = 0
	
	thoughtcraft_attempts = 0
	thoughtcraft_successes = 0
end


function onConnect(name, line, wildcards, styles)	
	--responsible for resetting all the internal variables to their meaningful defaults
	--this is to prevent DCs and reboots from affecting your performance aggregation totals.
	--it's also called by "clear" to wipe all the info and let you start fresh.
	resetMedFocValues()
		
	resetPromptValues()

	resetCombatValues()

	absolute_start_time = GetInfo(232)
end

function onStartMeditate(name, line, wildcards, styles)	
	if in_meditate == false then
		--ColourNote("red", "black", "Starting meditate!")
		--reset all counters
		last_meditate_tick = GetInfo(232)	
		current_meditate_ticks = 0.0
		current_elapsed_meditate_time = 0.0
		current_gained_pl = 0.0
		
		in_meditate = true
	end
end
 
function onStopMeditate(name, line, wildcards, styles)
	if in_meditate then			
		ColourTell("red", "black", "Meditate stopped!")
		if is_at_max_ki then
			ColourTell("green", "black", "(", "yellow", "black", "maxed!", "green", "black", ")\n")
			printFocusKi()
			is_at_max_ki = false
		else
			ColourTell("green", "black", "\n")
		end
		
		--aggregate all counters		
		total_meditate_ticks = total_meditate_ticks + current_meditate_ticks	
		total_elapsed_meditate_time = total_elapsed_meditate_time + current_elapsed_meditate_time
		total_gained_pl = total_gained_pl + current_gained_pl	
	
		local current_ticks_over_time = 0.0
		local current_gained_pl_per_tick = 0.0
		local current_gained_pl_per_second = 0.0
		
		if current_elapsed_meditate_time > 0 then
			current_gained_pl_per_second = current_gained_pl / current_elapsed_meditate_time		
			current_ticks_over_time = current_meditate_ticks / current_elapsed_meditate_time
		end
		
		if current_meditate_ticks > 0 then
			current_gained_pl_per_tick = current_gained_pl / current_meditate_ticks
		end
						
		local total_ticks_over_time = 0.0
		local total_gained_pl_per_tick = 0.0
		local total_gained_pl_per_second = 0.0
		
		if total_elapsed_meditate_time > 0 then
			total_ticks_over_time = total_meditate_ticks / total_elapsed_meditate_time
			total_gained_pl_per_second = total_gained_pl / total_elapsed_meditate_time
		end
		
		if total_meditate_ticks > 0 then
			total_gained_pl_per_tick = total_gained_pl / total_meditate_ticks
		end		
		
		
		ColourTell("green", "black", "T:",
			"white", "black", tostring(round(current_ticks_over_time)),
			"green", "black", "/s - PL:",
			"cyan", "black", shortenNumber(round(current_gained_pl_per_tick)),
			"green", "black", "/t - PL:",
			"cyan", "black", shortenNumber(round(current_gained_pl_per_second)),
			"green", "black", "/s -=- T:",
			"white", "black", tostring(round(total_ticks_over_time)),
			"green", "black", "/s - PL:",
			"cyan", "black", shortenNumber(round(total_gained_pl_per_tick)),
			"green", "black", "/t - PL:",
			"cyan", "black", shortenNumber(round(total_gained_pl_per_second)),
			"green", "black", "/s\n"
			)
	
		in_meditate = false
	
		onReportGains(name, line, wildcards)
	end
end

function onStartFocus(name, line, wildcards, styles)
	if in_focus == false then	
		--ColourNote("red", "black", "Starting focus!")
		--reset all counters
		last_focus_tick = GetInfo(232)
		current_elapsed_focus_time = 0
		current_gained_ki = 0	
		current_focus_ticks = 0		
		
		in_focus = true
	end
end

function onStopFocus(name, line, wildcards, styles)
	if in_focus then
		ColourTell("red", "black", "Focus stopped!")
		if is_out_of_ki then
			ColourTell("green", "black", "(", "yellow", "black", "empty!", "green", "black", ")\n")
			is_out_of_ki = false
		else
			ColourTell("green", "black", "\n")
		end 
		--aggregate all counters
		total_focus_ticks = total_focus_ticks + current_focus_ticks
		total_elapsed_focus_time = total_elapsed_focus_time + current_elapsed_focus_time
		total_gained_ki = total_gained_ki + current_gained_ki				
	
		local current_ticks_over_time = 0.0
		local current_gained_ki_per_tick = 0.0
		local current_gained_ki_per_second = 0.0
		
		if current_elapsed_focus_time > 0 then
			current_ticks_over_time = current_focus_ticks / current_elapsed_focus_time
			current_gained_ki_per_second = current_gained_ki / current_elapsed_focus_time		
		end
		
		if current_focus_ticks > 0 then
			current_gained_ki_per_tick = current_gained_ki / current_focus_ticks
		end
		
		local total_ticks_over_time = 0.0
		local total_gained_ki_per_tick = 0.0
		local total_gained_ki_per_second = 0.0
		
		if total_elapsed_focus_time > 0 then
			total_ticks_over_time = total_focus_ticks / total_elapsed_focus_time
			total_gained_ki_per_second = total_gained_ki / total_elapsed_focus_time	
		end
		if total_focus_ticks > 0 then
			total_gained_ki_per_tick = total_gained_ki / total_focus_ticks
		end	
		
		ColourTell("green", "black", "T:",
			"white", "black", tostring(round(current_ticks_over_time)),
			"green", "black", "/s - Ki:",
			"cyan", "black", tostring(round(current_gained_ki_per_tick)),
			"green", "black", "/t - Ki:",
			"cyan", "black", tostring(round(current_gained_ki_per_second)),
			"green", "black", "/s -=- T:",
			"white", "black", tostring(round(total_ticks_over_time)),
			"green", "black", "/s - Ki:",
			"cyan", "black", tostring(round(total_gained_ki_per_tick)),
			"green", "black", "/t - Ki:",
			"cyan", "black", tostring(round(total_gained_ki_per_second)),
			"green", "black", "/s\n"
			)
		
		in_focus = false
	
		onReportGains(name, line, wildcards)
	end
end

function onTickMeditate (name, line, wildcards, styles)	
	--begin incrementing ticks and saving info
	current_meditate_ticks = current_meditate_ticks + 1	
	local current_meditate_tick = GetInfo(232)	
	local elapsed_meditate_time = roundTime(current_meditate_tick - last_meditate_tick)
	current_elapsed_meditate_time = roundTime(current_elapsed_meditate_time + elapsed_meditate_time)
	last_meditate_tick = current_meditate_tick
	
	pl_gain_string1 = tostring(elapsed_meditate_time)
	pl_gain_string2 = tostring(current_elapsed_meditate_time)
end

function onTickFocus (name, line, wildcards, styles)	
	--begin incrementing ticks and saving info
	current_focus_ticks = current_focus_ticks + 1	
	local current_focus_tick = GetInfo(232)	
	local elapsed_focus_time = roundTime(current_focus_tick - last_focus_tick)
	current_elapsed_focus_time = roundTime(current_elapsed_focus_time + elapsed_focus_time)
	last_focus_tick = current_focus_tick
	
	ki_gain_string1 = tostring(elapsed_focus_time)
	ki_gain_string2 = tostring(current_elapsed_focus_time)
	
	--ki tick occurs after ki gain so the message goes here
	ColourTell("gray", "black", "(",
		"cyan", "black", "Foc",
		"gray", "black", ")",
		"yellow", "black", " Time+", 
		"white", "black", ki_gain_string1, 
		"yellow", "black", "s (", 
		"gray", "black", ki_gain_string2, 
		"yellow", "black", ") ",
		"green", "black", "Ki+",
		"red", "black", ki_gain_string3,
		"green", "black", " (",
		"cyan", "black", ki_gain_string4,
		"green", "black", ")",
		"green", "black", " Max:",
		"blue", "black", ki_gain_string5,
		"green", "black", "\n")		

	ki_gain_string1 = ""
	ki_gain_string2 = ""
	ki_gain_string3 = ""
	ki_gain_string4 = ""
	ki_gain_string5 = ""
end

function onGainedPL (name, line, wildcards, styles)
	--remove commas
	local pl_gained = tonumber(stripCommas(wildcards[2]), 10)
	if in_meditate then 
		--aggregate gains info
		current_gained_pl = current_gained_pl + pl_gained
		
		pl_gain_string3 = shortenNumber(pl_gained)
		pl_gain_string4 = shortenNumber(current_gained_pl)
		
		ColourTell("gray", "black", "(",
			"cyan", "black", "Med",
			"gray", "black", ") ",
			"yellow", "black", "Time+", 
			"white", "black", pl_gain_string1, 
			"yellow", "black", "s (", 
			"gray", "black", pl_gain_string2, 
			"yellow", "black", ") ", 
			"green", "black", "PL+",
			"red", "black", pl_gain_string3,
			"green", "black", " (",
			"blue", "black", pl_gain_string4,
			"green", "black", ")\n"
			)
					
		pl_gain_string1 = ""
		pl_gain_string2 = ""
		pl_gain_string3 = ""
		pl_gain_string4 = ""
	elseif training_stat ~= "" then
		training_pl_gained = training_pl_gained + pl_gained
	elseif pl_gained > 0 then
		combat_round_pl_gained = combat_round_pl_gained + pl_gained		
	end
end

--ki gained message fires BEFORE the tick message instead of afterwards so I want to concat them to look the same.
function onGainedKi (name, line, wildcards, styles)
	--remove commas
	local ki_gained = tonumber(stripCommas(wildcards[1]), 10)
	local ki_max = tonumber(stripCommas(wildcards[2]), 10)
	
	--get the original ki max if it didn't exist already
	if original_max_ki == 0 then
		original_max_ki = ki_max - ki_gained
	end
	
	--aggregate gains info
	current_gained_ki = current_gained_ki + ki_gained
	max_ki = ki_max
	
	ki_gain_string3 = tostring(ki_gained)
	ki_gain_string4 = shortenNumber(ki_max - original_max_ki)
	ki_gain_string5 = shortenNumber(ki_max)
end

function onPromptCheck (name, line, wildcards, styles)
	--handles comparing your prompt results to whatever is currently in session
	
	current_ki = tonumber(stripCommas(wildcards[1]), 10)	
	
	--if this isn't nil, you're looking at an actual prompt, otherwise something went weird.
	if current_ki then
		if wildcards[2] then
			--this means you're not in an idle prompt
			max_ki = tonumber(stripCommas(wildcards[2]), 10)
		end	
		if (truncate(current_ki * 100.0 / max_ki)) < 20 then
			if in_focus then
				already_received_meditate_message = true
				printMeditate()
			end
		end
	end
	
	--this is prevented from firing at the very end of the training cycle, because training_stat is wiped
	if training_pl_gained > 0 and training_stat ~= "" then
		total_training_pl_gained = total_training_pl_gained + training_pl_gained
		ColourTell("green", "black", "Training (",
					"cyan", "black", training_stat,
					"green", "black", ") at ",
					"cyan", "black", shortenNumber(times_gravity),
					"green", "black", " Gs - PL + ",
					"red", "black", shortenNumber(training_pl_gained),
					"green", "black", "(",
					"cyan", "black", shortenNumber(total_training_pl_gained),
					"green", "black", ")",
					"green", "black", "\n\n")
		training_pl_gained = 0
	end
	
	if current_ki == 0 and in_focus then
		--ColourNote("red","black", "Out of ki!\n")
		is_out_of_ki = true
		onStopFocus (name, line, wildcards, styles)
	end
	
	if current_ki == max_ki and max_ki > 0 and in_meditate then
		--ColourNote("red","black", "You're at max ki!\n")
		is_at_max_ki = true
		onStopMeditate (name, line, wildcards, styles)		
	end
end

function onReportGains (name, line, wildcards)
	local right_now = GetInfo(232)
	local total_elapsed_time = right_now - absolute_start_time
	
	local ki_gained_per_second = 0.0
	local pl_gained_per_second = 0.0
	local current_total_time = total_elapsed_time + current_elapsed_focus_time + current_elapsed_meditate_time
	if current_total_time > 0 then
		ki_gained_per_second = (total_gained_ki + current_gained_ki) / current_total_time
		pl_gained_per_second = (total_gained_pl + current_gained_pl) / current_total_time
	end
	local total_elapsed_time_in_minutes = current_total_time / 60
	
	
	ColourTell(
		"yellow", "black", "(Ki) Session: ",
		"white", "black", tostring(round(total_elapsed_time_in_minutes)),
		"yellow", "black", " min. - Ki:",
		"red", "black", tostring(round(ki_gained_per_second)),
		"yellow", "black", "/s (",
		"cyan", "black", shortenNumber(total_gained_ki),
		"yellow", "black", ") - PL:",
		"red", "black", tostring(round(pl_gained_per_second)),
		"yellow", "black", "/s (",
		"cyan", "black", shortenNumber(total_gained_pl),
		"yellow", "black", ")\n"
	)
end

function round(num)
  return tonumber(string.format("%." .. (2 or 0) .. "f", num))
end

function roundTime(num) 
	if num >= 0 then return math.floor(num+.5) 
		else return math.ceil(num-.5) end
end

function truncate(num)
  return tonumber(string.format("%." .. (0) .. "f", num))
end

function shortenNumber(num)
	local thousand_counter = 0
	while num > 1000 do
		thousand_counter = thousand_counter + 1
		num = num / 1000
	end
	
	local lookup_table = {
		[0] = "",
		[1] = "k",
		[2] = "m",
		[3] = "b",
		[4] = "q",
		[5] = "qi",
		[6] = "s",
		[7] = "sp",
		[8] = "o",
		[9] = "n",
		[10] = "d",
		[11] = "v"}
	
	return tostring(round(num)) .. lookup_table[thousand_counter]
end

function stripCommas(str)
	return string.gsub(str,",","")
end

--handles setting vars and nothing else. The print is in prompt2
function onPromptScrape (name, line, wildcards, styles)
	health = wildcards[1]
	--ki is already handled by an early-sequenced prompt check, we just
	--need to get focus and set the theoretical max
	current_focus = tonumber(stripCommas(wildcards[4]), 10)
	if current_focus then
		if current_focus > max_focus then
		max_focus = current_focus
		end
	end	
end

function onBattlePromptScrape (name, line, wildcards, styles)
	health = wildcards[1]	
	foe_health = tonumber(stripCommas(wildcards[2]), 10)
	--ki is already handled by an early-sequenced prompt check, we just
	--need to get focus and set the theoretical max
	current_focus = tonumber(stripCommas(wildcards[5]), 10)
	if current_focus then
		if current_focus > max_focus then
		max_focus = current_focus
		end
	end
end

function onPromptScrape2 (name, line, wildcards, styles)
	base_pl = wildcards[1]
	current_pl = wildcards[2]
	zeni = tonumber(stripCommas(wildcards[3]), 10)
	current_armor = tonumber(stripCommas(wildcards[4]), 10)
	max_armor = tonumber(stripCommas(wildcards[5]), 10)	
	
	local focus_string = "-"
	
	if max_focus > 0 then
		focus_string = tostring(truncate(current_focus * 100.0 / max_focus)) .. "%/" .. tostring(current_focus)
	end
	
	local focus_color = "cyan"
	if is_low_on_focus then
		focus_color = "red"
	end
	
	local armor_string = "-"
	local dr_color = "cyan"
	if max_armor > 0 then
		armor_string = tostring(truncate(current_armor * 100.0 / max_armor))
		if (current_armor * 100.0 / max_armor) < 80 then
			dr_color = "red"
		end
	end
	
	local foe_string = "-"
	if foe_health > 0 then
		foe_string = tostring(foe_health)
	end
	local dr_string = tostring(math.min(80,truncate(current_armor / 100.0)))
	
	
	local pl_string = current_pl
	local pl_color = "red"
	if base_pl == current_pl then
		pl_color = "gray"		
	end
	
	local ki_color = "cyan"
	if (truncate(current_ki * 100.0 / max_ki)) < 20 then
		if in_focus then
			if already_received_meditate_message then
				already_received_meditate_message = false
			else
				printMeditate()
			end
		end
		ki_color = "red"
	end
	if combat_round_pl_gained > 0 then
		ColourTell("green", "black", "This combat round's PL+",
				"cyan", "black", shortenNumber(combat_round_pl_gained),
				"green", "black", "\n\n")
		combat_round_pl_gained = 0
	end
	if training_pl_gained > 0 then
		ColourTell("green", "black", "Training (",
					"cyan", "black", training_stat,
					"green", "black", ") at ",
					"cyan", "black", shortenNumber(times_gravity),
					"green", "black", " Gs - PL + ",
					"red", "black", shortenNumber(training_pl_gained),
					"green", "black", "\n\n")
		total_training_pl_gained = total_training_pl_gained + training_pl_gained
		training_pl_gained = 0
	end
	
	ColourTell("white", "black", "H[",
		"red", "black", tostring(health),
		"white", "black", "] V[",
		"magenta", "black", foe_string,
		"white", "black", "] K[",
		ki_color, "black", tostring(truncate(current_ki * 100.0 / max_ki)),
		"white", "black", "%/",
		"blue", "black", shortenNumber(max_ki),
		"white", "black", "] F[",
		focus_color, "black", focus_string,
		"white", "black", "] P[",
		pl_color, "black", pl_string,
		"white", "black", "] $[",
		"yellow", "black", shortenNumber(zeni),
		"white", "black", "] A[",
		"green", "black", armor_string,
		"white", "black", "%] DR[",
		dr_color, "black", dr_string,
		"white", "black", "%]"
		)
	if is_low_on_focus then
		is_low_on_focus = false
	end
end

function onGetZeni (name, line, wildcards, styles)

	require "wait"
	wait.make (function ()
		wait.time (0.8)
		local received_zeni = wildcards[1]
		ColourTell("white", "black", "    You found ",
			"yellow", "black", received_zeni,
			"white", "black", " zeni!\n")
	end)
end

function printFocusKi()
	ColourTell(
		"red", "black",		" _______ _______ _______ __   __ _______   ___   _ ___  \n",
		"red", "black",		"|       |       |       |  | |  |       | |   | | |   | \n",
		"red", "black",		"|    ___|   _   |       |  | |  |  _____| |   |_| |   | \n",
		"red", "black",		"|   |___|  | |  |       |  |_|  | |_____  |      _|   | \n",
		"red", "black",		"|    ___|  |_|  |      _|       |_____  | |     |_|   | \n",
		"red", "black",		"|   |   |       |     |_|       |_____| | |    _  |   | \n",
		"red", "black",		"|___|   |_______|_______|_______|_______| |___| |_|___| \n\n")
end

function printMeditate()
	ColourTell(
		"red", "black",		" __   __ _______ ______  ___ _______ _______ _______ _______ \n",
		"red", "black",		"|  |_|  |       |      ||   |       |   _   |       |       |\n",
		"red", "black",		"|       |    ___|  _    |   |_     _|  |_|  |_     _|    ___|\n",
		"red", "black",		"|       |   |___| | |   |   | |   | |       | |   | |   |___ \n",
		"red", "black",		"|       |    ___| |_|   |   | |   | |       | |   | |    ___|\n",
		"red", "black",		"| ||_|| |   |___|       |   | |   | |   _   | |   | |   |___ \n",
		"red", "black",		"|_|   |_|_______|______||___| |___| |__| |__| |___| |_______|\n\n"
		)	
end

function printStand()
	ColourTell(
		"red", "black",		" _______ _______ _______ __    _ ______    __   __ _______ \n",
		"red", "black",		"|       |       |   _   |  |  | |      |  |  | |  |       |\n",
		"red", "black",		"|  _____|_     _|  |_|  |   |_| |  _    | |  | |  |    _  |\n",
		"red", "black",		"| |_____  |   | |       |       | | |   | |  |_|  |   |_| |\n",
		"red", "black",		"|_____  | |   | |       |  _    | |_|   | |       |    ___|\n",
		"red", "black",		" _____| | |   | |   _   | | |   |       | |       |   |    \n",
		"red", "black",		"|_______| |___| |__| |__|_|  |__|______|  |_______|___|    \n\n")		
end

function onNeedFocus()
	is_low_on_focus = true
end
function resetCombatValues()
	combat_pl = 0	
	attacks = 0
	defends = 0
	blocks = 0
	dodges = 0
	misses = 0
	enemy_misses = 0
	soaks = 0
	enemy_soaks = 0
	hits = 0
	enemy_hits = 0
	damage_dealt = 0
	damage_received = 0
	total_damage_dealt = 0
	total_damage_received = 0
	total_attacks = 0
	total_defends = 0
	total_blocks = 0
	total_dodges = 0
	total_misses = 0
	total_enemy_misses = 0
	total_soaks = 0
	total_enemy_soaks = 0
	total_hits = 0
	total_enemy_hits = 0
	combats = 0
	overkill_counter = 0
	foe_name = ""
end

function onEndCombat(name, line, wildcards, styles)	
	foe_health = 0

	require "wait"
	wait.make (function ()
		wait.time (0.2)
		ColourTell("red", "black", "\n Fight's over!\n")
		wait.time (0.2)
		ColourTell("white", "black", "  Hit: ",
			"cyan", "black", tostring(hits),
			"cyan", "black", "(" .. tostring(round(hits * 100.0 / attacks)) .. "%)",
			"white", "black", " Miss: ",	
			"cyan", "black", tostring(misses + enemy_soaks),
			"cyan", "black", "(" .. tostring(round((misses + enemy_soaks) * 100.0 / attacks)) .. "%)",
			"white", "black", " DPH: ",
			"cyan", "black", tostring(round((damage_dealt + overkill_counter) / hits)),
			"white", "black", " Overkill: ",
			"cyan", "black", shortenNumber(overkill_counter),
			"white", "black", "\n")		
		if defends + enemy_hits + enemy_misses + soaks + blocks + dodges + damage_received > 0 then
			wait.time (0.2)
			ColourTell(
				"yellow", "black", "   (Enemy) Hit: ",
				"magenta", "black", tostring(enemy_hits),
				"cyan", "black", "(" .. tostring(round(enemy_hits * 100.0 / defends)) .. "%)",
				"yellow", "black", " Miss: ",
				"magenta", "black", tostring(enemy_misses + soaks + blocks + dodges),
				"cyan", "black", "(" .. tostring(round((enemy_misses + soaks + blocks + dodges) * 100.0 / defends)) .. "%)",	
				"yellow", "black", " Dmg: ",
				"red", "black", tostring(damage_received),	
				"yellow", "black", " (Avg:",
				"cyan", "black", tostring(round(nilZero(damage_received / enemy_hits))),
				"yellow", "black", ")",
				"white", "black", "\n")
		end
		
		total_attacks = total_attacks + attacks
		total_defends = total_defends + defends
		total_blocks = total_blocks + blocks
		total_dodges = total_dodges + dodges
		total_misses = total_misses + misses
		total_enemy_misses = total_enemy_misses + enemy_misses
		total_soaks = total_soaks + soaks
		total_enemy_soaks = total_enemy_soaks + enemy_soaks
		total_hits = total_hits + hits
		total_enemy_hits = total_enemy_hits + enemy_hits
		total_damage_dealt = total_damage_dealt + damage_dealt
		total_damage_received = total_damage_received + damage_received
		
		damage_dealt = 0
		damage_received = 0
		attacks = 0
		defends = 0
		blocks = 0
		dodges = 0
		misses = 0
		enemy_misses = 0
		soaks = 0
		enemy_soaks = 0
		hits = 0
		enemy_hits = 0
		overkill_counter = 0
		foe_name = ""
		hits_since_last_round = 0
		damage_dealt_since_last_round = 0
		hits_received_since_last_round = 0
		damage_received_since_last_round = 0
		
		combats = combats + 1
	end)
end

function nilZero(obj)
	if obj ~= nil then
		return obj
	else
		return 0
	end
end


function onBlock (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	defends = defends + 1
	blocks = blocks + 1
end

function onSoak (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	defends = defends + 1
	soaks = soaks + 1
end

function onEnemySoak (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	enemy_soaks = enemy_soaks + 1
	attacks = attacks + 1
end

function onDodge (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	defends = defends + 1
	dodges = dodges + 1
end

function onEnemyMiss (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	defends = defends + 1
	enemy_misses = enemy_misses + 1
end

function onMiss (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	misses = misses + 1
	attacks = attacks + 1
end

function onTakeDamage (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	defends = defends + 1
	enemy_hits = enemy_hits + 1
	local dam_str = stripCommas(wildcards.damage)
	local dam_num = tonumber(dam_str)
	damage_received = damage_received + dam_num
	
	hits_received_since_last_round = hits_received_since_last_round + 1
	damage_received_since_last_round = damage_received_since_last_round + dam_num
end

function onDealDamage (name, line, wildcards, styles)
	if wildcards.foename and foe_name == "" then
		foe_name = wildcards.foename
	end
	attacks = attacks + 1
	hits = hits + 1
	local dam_str = stripCommas(wildcards.damage)
	local dam_num = tonumber(dam_str)
	damage_dealt = damage_dealt + dam_num
	--you can never do more than 100 damage in a single combat, this clamps it
	if damage_dealt > 100 then
		overkill_counter = overkill_counter + (damage_dealt - 100)
		damage_dealt = 100
	end
	
	hits_since_last_round = hits_since_last_round + 1
	damage_dealt_since_last_round = damage_dealt_since_last_round + dam_num
end

function onGainCombatPL(name, line, wildcards, styles)	
	onPromptShowRoundInfo(name, line, wildcards, styles)
	require "wait"	
	wait.make (function ()
		wait.time (1.0)
		local num_str = stripCommas(wildcards[2])
		local pl_gained = tonumber(num_str)
		combat_pl = combat_pl + pl_gained
		ColourTell("green", "black", "     Total PL+",
			"red", "black", shortenNumber(pl_gained),
			"green", "black", "\n")
	end)
end

function onPromptShowRoundInfo(name, line, wildcards, styles)	
	if foe_name ~= "" then
		ColourTell("red", "black", "Fighting! (",
					"white", "black", foe_name,
					"red", "black", ")\n")
	end
	
	if hits_since_last_round + damage_dealt_since_last_round + hits_received_since_last_round + damage_received_since_last_round > 0 then
			ColourTell("white", "black", stringIfValue("Hit x", tonumber(damage_dealt_since_last_round)),
			"magenta", "black", stringIfValue(tonumber(hits_since_last_round), tonumber(damage_dealt_since_last_round)),
			"white", "black", stringIfValue(" [", tonumber(damage_dealt_since_last_round)),
			"magenta", "black", stringIfValue(tonumber(damage_dealt_since_last_round), tonumber(damage_dealt_since_last_round)),
			"white", "black", stringIfValue("]\n", tonumber(damage_dealt_since_last_round)),
			"yellow", "black", stringIfValue("Enemy hit x",tonumber(damage_received_since_last_round)),
			"red", "black", stringIfValue(tonumber(hits_received_since_last_round),tonumber(damage_received_since_last_round)),
			"yellow", "black", stringIfValue(" [",tonumber(damage_received_since_last_round)),
			"red", "black", stringIfValue(tonumber(damage_received_since_last_round),tonumber(damage_received_since_last_round)),
			"yellow", "black", stringIfValue("]",tonumber(damage_received_since_last_round)),
			"white", "black", stringIfValue("\n", tonumber(damage_received_since_last_round)))
	end
	hits_since_last_round = 0
	damage_dealt_since_last_round = 0
	hits_received_since_last_round = 0
	damage_received_since_last_round = 0
end

function stringIfValue(str, num)
	if num > 0 then
		return str
	else 
		return ""
	end
end

function onReportGains (name, line, wildcards)
	local right_now = GetInfo(232)
	local total_elapsed_time = right_now - absolute_start_time
	
	local ki_gained_per_second = 0.0
	local pl_gained_per_second = 0.0
	local current_total_time = total_elapsed_time + current_elapsed_focus_time + current_elapsed_meditate_time
	if current_total_time > 0 then
		ki_gained_per_second = (total_gained_ki + current_gained_ki) / current_total_time
		pl_gained_per_second = (total_gained_pl + current_gained_pl) / current_total_time
	end
	local total_elapsed_time_in_minutes = current_total_time / 60
	
	
	ColourTell(
		"yellow", "black", "(Ki) Session: ",
		"white", "black", tostring(round(total_elapsed_time_in_minutes)),
		"yellow", "black", " min. - Ki:",
		"red", "black", tostring(round(ki_gained_per_second)),
		"yellow", "black", "/s (",
		"cyan", "black", shortenNumber(total_gained_ki),
		"yellow", "black", ") - PL:",
		"red", "black", tostring(round(pl_gained_per_second)),
		"yellow", "black", "/s (",
		"cyan", "black", shortenNumber(total_gained_pl),
		"yellow", "black", ")\n"
	)
end

function setPrompt (name, line, wildcards)
	local str = "prompt &WH[&R%h&W] K[&C%m&W/&c%M&W] F[&C%f&W]%Y&WP[&w%x&W|&z%X&W] $[&G$%g&W] A[&G%z&W/&g%Z&W]%Y&D"
	Send(str)
end

function setBattlePrompt (name, line, wildcards)
	local str = "fprompt &WH[&R%h&W] V[&r%y&W] K[&C%m&W/&c%M&W] F[&C%f&W]%Y&WP[&w%x&W|&z%X&W] $[&G$%g&W] A[&G%z&W/&g%Z&W]%Y&D"
	Send(str)
end

function onStartTraining (name, line, wildcards, styles)
	if wildcards.trainingStat then
		training_stat = wildcards.trainingStat
		times_gravity = tonumber(wildcards.timesGravity)
	end
	total_training_pl_gained = 0
end

function onStopTraining (name, line, wildcards, styles)	
	if training_pl_gained > 0 and training_stat ~= "" then
		ColourTell("green", "black", "Training (",
					"cyan", "black", training_stat,
					"green", "black", ") at ",
					"cyan", "black", shortenNumber(times_gravity),
					"green", "black", " Gs - PL + ",
					"red", "black", shortenNumber(training_pl_gained),
					"green", "black", "\n\n")
		total_training_pl_gained = total_training_pl_gained + training_pl_gained
		training_pl_gained = 0
	end
	
	training_stat = ""
	ColourTell("green", "black", "Total PL gained from training: ",
				"red", "black", shortenNumber(total_training_pl_gained),
				"green", "black", "\n\n")
end

function onLootDrop (name, line, wildcards, styles)
	printWoot()
end

function printWoot()
ColourTell(
	"red", "black", " _     _ _______ _______ _______ \n",
	"red", "black", "| | _ | |       |       |       |\n",
	"red", "black", "| || || |   _   |   _   |_     _|\n",
	"red", "black", "|       |  | |  |  | |  | |   |  \n",
	"red", "black", "|       |  |_|  |  |_|  | |   |  \n",
	"red", "black", "|   _   |       |       | |   |  \n",
	"red", "black", "|__| |__|_______|_______| |___|  \n")
end

function onEarnedTrains (name, line, wildcards, styles)
	printTrains()
end

function printTrains()
ColourTell(
"red", "black", " _______ ______   _______ ___ __    _ _______ \n",
"red", "black", "|       |    _ | |   _   |   |  |  | |       |\n",
"red", "black", "|_     _|   | || |  |_|  |   |   |_| |  _____|\n",
"red", "black", "  |   | |   |_||_|       |   |       | |_____ \n",
"red", "black", "  |   | |    __  |       |   |  _    |_____  |\n",
"red", "black", "  |   | |   |  | |   _   |   | | |   |_____| |\n",
"red", "black", "  |___| |___|  |_|__| |__|___|_|  |__|_______|\n")
end

function onThoughtcraftFail (name, line, wildcards, styles)
	thoughtcraft_attempts = thoughtcraft_attempts + 1
	ColourNote("blue", "black", "Thoughtcraft failed! Successes: ",
		"cyan", "black", tostring(thoughtcraft_successes),
		"blue", "black", " out of ",
		"cyan", "black", tostring(thoughtcraft_attempts),
		"blue", "black", " (",
		"cyan", "black", tostring(round((thoughtcraft_successes * 100) / thoughtcraft_attempts)),
		"blue", "black", "%)")
end

function onThoughtcraftStart (name, line, wildcards, styles)
	thoughtcraft_attempts = 0	
	thoughtcraft_successes = 0
end

function onThoughtcraftStop (name, line, wildcards, styles)
	ColourNote("blue", "black", "You stop creating shards. Successes: ",
		"cyan", "black", tostring(thoughtcraft_successes),
		"blue", "black", " out of ",
		"cyan", "black", tostring(thoughtcraft_attempts),
		"blue", "black", " (",
		"cyan", "black", tostring(round((thoughtcraft_successes * 100) / thoughtcraft_attempts)),
		"blue", "black", "%)")
end

function onThoughtcraftSucceed (name, line, wildcards, styles)
	thoughtcraft_attempts = thoughtcraft_attempts + 1
	thoughtcraft_successes = thoughtcraft_successes + 1
	ColourNote("blue", "black", "Thoughtcraft succeeded! Successes: ",
		"cyan", "black", tostring(thoughtcraft_successes),
		"blue", "black", " out of ",
		"cyan", "black", tostring(thoughtcraft_attempts),
		"blue", "black", " (",
		"cyan", "black", tostring(round((thoughtcraft_successes * 100) / thoughtcraft_attempts)),
		"blue", "black", "%)")
end
]]>
</script>
</muclient>
